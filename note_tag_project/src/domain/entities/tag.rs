//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tag")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub tag_name: String,
    pub create_at: Option<DateTimeUtc>,
    pub updated_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::note_tag::Entity")]
    NoteTag,
    #[sea_orm(has_many = "super::user_tag::Entity")]
    UserTag,
}

impl Related<super::note_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NoteTag.def()
    }
}

impl Related<super::user_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserTag.def()
    }
}

impl Related<super::note::Entity> for Entity {
    fn to() -> RelationDef {
        super::note_tag::Relation::Note.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::note_tag::Relation::Tag.def().rev())
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_tag::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_tag::Relation::Tag.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
